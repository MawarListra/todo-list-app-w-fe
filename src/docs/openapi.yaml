openapi: 3.0.3
info:
  title: TODO List API
  description: |
    A comprehensive RESTful API for managing tasks organized within multiple lists.

    ## Features
    - Create and manage multiple todo lists
    - Add, update, and delete tasks within lists
    - Set deadlines and priorities for tasks
    - Track completion status
    - Advanced querying and filtering
    - Task statistics and productivity insights

    ## Authentication
    Currently, this API does not require authentication. All endpoints are publicly accessible.

    ## Rate Limiting
    API requests are rate-limited to 1000 requests per hour per IP address.

    ## Data Validation
    All request bodies are validated against JSON schemas. Invalid requests will return 400 Bad Request with validation details.
  version: 1.0.0
  contact:
    name: Development Team
    email: dev@todoapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3001
    description: Development server
  - url: https://api.todolist.example.com
    description: Production server

security: []

tags:
  - name: Lists
    description: Todo list management operations
  - name: Tasks
    description: Task management operations within lists
  - name: Queries
    description: Advanced query and analytics operations
  - name: Health
    description: Health check and monitoring endpoints

paths:
  # Health endpoints
  /api/health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Check the health status of the API and its dependencies
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
              example:
                status: healthy
                timestamp: '2025-07-02T10:30:00.000Z'
                version: '1.0.0'
                environment: 'development'
                database:
                  status: connected
                  type: memory
                uptime: 3600
                responseTime: '15.23ms'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'

  /api/health/ready:
    get:
      tags: [Health]
      summary: Readiness check
      description: Check if the service is ready to accept traffic
      operationId: getReadiness
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessResponse'
        '503':
          description: Service is not ready

  /api/health/live:
    get:
      tags: [Health]
      summary: Liveness check
      description: Check if the service is alive and responsive
      operationId: getLiveness
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessResponse'

  # List endpoints
  /api/lists:
    get:
      tags: [Lists]
      summary: Get all lists
      description: Retrieve all todo lists with optional filtering and sorting
      operationId: getLists
      parameters:
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [name, createdAt, updatedAt]
          description: Field to sort by
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order
      responses:
        '200':
          description: Lists retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ListResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Lists retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Lists]
      summary: Create a new list
      description: Create a new todo list
      operationId: createList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateListRequest'
            example:
              name: 'Work Tasks'
              description: 'Tasks related to work projects'
      responses:
        '201':
          description: List created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ListResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'List created successfully'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/lists/{listId}:
    get:
      tags: [Lists]
      summary: Get a specific list
      description: Retrieve a list by its ID
      operationId: getListById
      parameters:
        - $ref: '#/components/parameters/ListIdParam'
      responses:
        '200':
          description: List retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ListResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'List retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Lists]
      summary: Update a list
      description: Update an existing list by its ID
      operationId: updateList
      parameters:
        - $ref: '#/components/parameters/ListIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateListRequest'
            example:
              name: 'Updated Work Tasks'
              description: 'Updated description for work tasks'
      responses:
        '200':
          description: List updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ListResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'List updated successfully'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Lists]
      summary: Delete a list
      description: Delete a list and all its tasks
      operationId: deleteList
      parameters:
        - $ref: '#/components/parameters/ListIdParam'
      responses:
        '200':
          description: List deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      deleted:
                        type: boolean
                        example: true
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'List deleted successfully'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/lists/{listId}/tasks:
    get:
      tags: [Lists]
      summary: Get tasks in a list
      description: Retrieve all tasks within a specific list
      operationId: getTasksByList
      parameters:
        - $ref: '#/components/parameters/ListIdParam'
        - in: query
          name: status
          schema:
            type: string
            enum: [completed, pending]
          description: Filter tasks by completion status
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high, urgent]
          description: Filter tasks by priority
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [title, priority, deadline, createdAt, updatedAt]
          description: Field to sort by
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Tasks retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      tags: [Tasks]
      summary: Create a task in a list
      description: Create a new task within a specific list
      operationId: createTask
      parameters:
        - $ref: '#/components/parameters/ListIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
            example:
              title: 'Complete project documentation'
              description: 'Write comprehensive documentation for the new feature'
              priority: 'high'
              deadline: '2025-07-10T17:00:00.000Z'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task created successfully'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Task endpoints
  /api/tasks/{taskId}:
    get:
      tags: [Tasks]
      summary: Get a specific task
      description: Retrieve a task by its ID
      operationId: getTaskById
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      tags: [Tasks]
      summary: Update a task
      description: Update an existing task by its ID
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTaskRequest'
            example:
              title: 'Updated task title'
              description: 'Updated task description'
              priority: 'urgent'
              deadline: '2025-07-12T18:00:00.000Z'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task updated successfully'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags: [Tasks]
      summary: Delete a task
      description: Delete a task by its ID
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      responses:
        '200':
          description: Task deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      deleted:
                        type: boolean
                        example: true
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task deleted successfully'
                  timestamp:
                    type: string
                    format: date-time
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/{taskId}/deadline:
    patch:
      tags: [Tasks]
      summary: Update task deadline
      description: Update the deadline of a specific task
      operationId: updateTaskDeadline
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                deadline:
                  type: string
                  format: date-time
                  description: The new deadline (ISO string)
              required:
                - deadline
            example:
              deadline: '2025-07-15T14:30:00.000Z'
      responses:
        '200':
          description: Task deadline updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task deadline updated successfully'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/{taskId}/completion:
    patch:
      tags: [Tasks]
      summary: Update task completion status
      description: Mark a task as completed or incomplete
      operationId: updateTaskCompletion
      parameters:
        - $ref: '#/components/parameters/TaskIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                completed:
                  type: boolean
                  description: Whether the task is completed
              required:
                - completed
            example:
              completed: true
      responses:
        '200':
          description: Task completion status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task completion status updated successfully'
                  timestamp:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Query endpoints
  /api/tasks:
    get:
      tags: [Queries]
      summary: Query tasks with filtering
      description: Get tasks with advanced filtering and sorting options
      operationId: queryTasks
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [completed, pending]
          description: Filter by completion status
        - in: query
          name: priority
          schema:
            type: string
            enum: [low, medium, high, urgent]
          description: Filter by priority level
        - in: query
          name: sortBy
          schema:
            type: string
            enum: [title, priority, deadline, createdAt, updatedAt]
          description: Field to sort by
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: asc
          description: Sort order
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum number of results
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of results to skip
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/due-this-week:
    get:
      tags: [Queries]
      summary: Get tasks due this week
      description: Retrieve all tasks that are due within the current week
      operationId: getTasksDueThisWeek
      responses:
        '200':
          description: Tasks due this week retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Tasks due this week retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/overdue:
    get:
      tags: [Queries]
      summary: Get overdue tasks
      description: Retrieve all tasks that are past their deadline
      operationId: getOverdueTasks
      responses:
        '200':
          description: Overdue tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/TaskResponse'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Overdue tasks retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/statistics:
    get:
      tags: [Queries]
      summary: Get task statistics
      description: Get overall statistics about all tasks
      operationId: getTaskStatistics
      responses:
        '200':
          description: Task statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/TaskStatistics'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Task statistics retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/tasks/grouped:
    get:
      tags: [Queries]
      summary: Get tasks grouped by status
      description: Get tasks organized by their completion status
      operationId: getTasksGrouped
      responses:
        '200':
          description: Grouped tasks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/GroupedTasks'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Grouped tasks retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '500':
          $ref: '#/components/responses/InternalServerError'

  /api/insights/productivity:
    get:
      tags: [Queries]
      summary: Get productivity insights
      description: Get productivity analytics and insights
      operationId: getProductivityInsights
      responses:
        '200':
          description: Productivity insights retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductivityInsights'
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Productivity insights retrieved successfully'
                  timestamp:
                    type: string
                    format: date-time
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    ListIdParam:
      in: path
      name: listId
      required: true
      schema:
        type: string
        format: uuid
      description: The unique identifier of the list
      example: '123e4567-e89b-12d3-a456-426614174000'

    TaskIdParam:
      in: path
      name: taskId
      required: true
      schema:
        type: string
        format: uuid
      description: The unique identifier of the task
      example: '987fcdeb-51a2-43d7-8f9e-123456789abc'

  schemas:
    # Core Data Models
    ListResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the list
          example: '123e4567-e89b-12d3-a456-426614174000'
        name:
          type: string
          description: Name of the list
          example: 'Work Tasks'
        description:
          type: string
          nullable: true
          description: Optional description of the list
          example: 'Tasks related to work projects'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the list was created
          example: '2025-07-01T10:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the list was last updated
          example: '2025-07-02T14:30:00.000Z'
        taskCount:
          type: integer
          description: Number of tasks in the list
          example: 5

    TaskResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the task
          example: '987fcdeb-51a2-43d7-8f9e-123456789abc'
        listId:
          type: string
          format: uuid
          description: ID of the list this task belongs to
          example: '123e4567-e89b-12d3-a456-426614174000'
        title:
          type: string
          description: Title of the task
          example: 'Complete project documentation'
        description:
          type: string
          nullable: true
          description: Optional detailed description of the task
          example: 'Write comprehensive documentation for the new feature'
        completed:
          type: boolean
          description: Whether the task is completed
          example: false
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Priority level of the task
          example: 'high'
        deadline:
          type: string
          format: date-time
          nullable: true
          description: Optional deadline for the task
          example: '2025-07-10T17:00:00.000Z'
        createdAt:
          type: string
          format: date-time
          description: Timestamp when the task was created
          example: '2025-07-01T11:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          description: Timestamp when the task was last updated
          example: '2025-07-02T15:00:00.000Z'
        completedAt:
          type: string
          format: date-time
          nullable: true
          description: Timestamp when the task was completed
          example: null

    # Request Models
    CreateListRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the list
          example: 'Work Tasks'
        description:
          type: string
          maxLength: 500
          description: Optional description of the list
          example: 'Tasks related to work projects'

    UpdateListRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Name of the list
          example: 'Updated Work Tasks'
        description:
          type: string
          maxLength: 500
          description: Optional description of the list
          example: 'Updated description for work tasks'

    CreateTaskRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Title of the task
          example: 'Complete project documentation'
        description:
          type: string
          maxLength: 1000
          description: Optional detailed description of the task
          example: 'Write comprehensive documentation for the new feature'
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
          description: Priority level of the task
          example: 'high'
        deadline:
          type: string
          format: date-time
          description: Optional deadline for the task
          example: '2025-07-10T17:00:00.000Z'

    UpdateTaskRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: Title of the task
          example: 'Updated task title'
        description:
          type: string
          maxLength: 1000
          description: Optional detailed description of the task
          example: 'Updated task description'
        completed:
          type: boolean
          description: Whether the task is completed
          example: false
        priority:
          type: string
          enum: [low, medium, high, urgent]
          description: Priority level of the task
          example: 'urgent'
        deadline:
          type: string
          format: date-time
          description: Optional deadline for the task
          example: '2025-07-12T18:00:00.000Z'

    # Health Check Models
    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          enum: [healthy, unhealthy]
          description: Overall health status
          example: 'healthy'
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the health check
          example: '2025-07-02T10:30:00.000Z'
        version:
          type: string
          description: API version
          example: '1.0.0'
        environment:
          type: string
          description: Current environment
          example: 'development'
        database:
          type: object
          properties:
            status:
              type: string
              enum: [connected, disconnected]
              example: 'connected'
            type:
              type: string
              enum: [memory, sql]
              example: 'memory'
        uptime:
          type: integer
          description: Service uptime in seconds
          example: 3600

    ReadinessResponse:
      type: object
      properties:
        ready:
          type: boolean
          description: Whether the service is ready
          example: true
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the readiness check
          example: '2025-07-02T10:30:00.000Z'
        checks:
          type: object
          properties:
            database:
              type: string
              enum: [pass, fail]
              example: 'pass'

    LivenessResponse:
      type: object
      properties:
        alive:
          type: boolean
          description: Whether the service is alive
          example: true
        timestamp:
          type: string
          format: date-time
          description: Timestamp of the liveness check
          example: '2025-07-02T10:30:00.000Z'

    # Statistics and Analytics Models
    TaskStatistics:
      type: object
      properties:
        totalTasks:
          type: integer
          description: Total number of tasks
          example: 25
        completedTasks:
          type: integer
          description: Number of completed tasks
          example: 15
        pendingTasks:
          type: integer
          description: Number of pending tasks
          example: 10
        overdueTasks:
          type: integer
          description: Number of overdue tasks
          example: 3
        tasksWithDeadlines:
          type: integer
          description: Number of tasks with deadlines
          example: 18
        completionRate:
          type: number
          format: float
          description: Task completion rate as a percentage
          example: 60.0
        priorityBreakdown:
          type: object
          properties:
            low:
              type: integer
              example: 5
            medium:
              type: integer
              example: 12
            high:
              type: integer
              example: 6
            urgent:
              type: integer
              example: 2

    GroupedTasks:
      type: object
      properties:
        completed:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
          description: List of completed tasks
        pending:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
          description: List of pending tasks

    ProductivityInsights:
      type: object
      properties:
        averageCompletionTime:
          type: number
          format: float
          description: Average time to complete tasks in hours
          example: 24.5
        mostProductiveDay:
          type: string
          description: Day of week with most completions
          example: 'Monday'
        tasksByPriority:
          type: object
          properties:
            low:
              type: integer
              example: 5
            medium:
              type: integer
              example: 12
            high:
              type: integer
              example: 6
            urgent:
              type: integer
              example: 2
        recentActivity:
          type: object
          properties:
            lastWeekCompletions:
              type: integer
              example: 8
            thisWeekCompletions:
              type: integer
              example: 5
            trend:
              type: string
              enum: [increasing, decreasing, stable]
              example: 'decreasing'

    # Pagination Models
    PaginatedTaskResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/TaskResponse'
        pagination:
          type: object
          properties:
            total:
              type: integer
              description: Total number of items
              example: 100
            limit:
              type: integer
              description: Number of items per page
              example: 20
            offset:
              type: integer
              description: Number of items skipped
              example: 0
            hasNext:
              type: boolean
              description: Whether there are more items
              example: true
            hasPrev:
              type: boolean
              description: Whether there are previous items
              example: false
        success:
          type: boolean
          example: true
        message:
          type: string
          example: 'Tasks retrieved successfully'
        timestamp:
          type: string
          format: date-time

    # Error Models
    ValidationError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: 'VALIDATION_ERROR'
            message:
              type: string
              example: 'Validation failed'
            details:
              type: array
              items:
                type: object
                properties:
                  field:
                    type: string
                    example: 'title'
                  message:
                    type: string
                    example: 'Title is required'
                  value:
                    oneOf:
                      - type: string
                      - type: number
                      - type: boolean
                      - type: 'null'
        timestamp:
          type: string
          format: date-time

    NotFoundError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: 'RESOURCE_NOT_FOUND'
            message:
              type: string
              example: 'The requested resource was not found'
            resource:
              type: string
              example: 'Task'
            id:
              type: string
              example: '123e4567-e89b-12d3-a456-426614174000'
        timestamp:
          type: string
          format: date-time

    InternalServerError:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: 'INTERNAL_SERVER_ERROR'
            message:
              type: string
              example: 'An unexpected error occurred'
            requestId:
              type: string
              example: 'req_123456789'
        timestamp:
          type: string
          format: date-time

  responses:
    ValidationError:
      description: Bad Request - Validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFoundError'

    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'

  examples:
    CreateListExample:
      summary: Create a work list
      value:
        name: 'Work Tasks'
        description: 'Tasks related to work projects'

    CreateTaskExample:
      summary: Create a high-priority task
      value:
        title: 'Complete project documentation'
        description: 'Write comprehensive documentation for the new feature'
        priority: 'high'
        deadline: '2025-07-10T17:00:00.000Z'

    TaskResponseExample:
      summary: Task response example
      value:
        id: '987fcdeb-51a2-43d7-8f9e-123456789abc'
        listId: '123e4567-e89b-12d3-a456-426614174000'
        title: 'Complete project documentation'
        description: 'Write comprehensive documentation for the new feature'
        completed: false
        priority: 'high'
        deadline: '2025-07-10T17:00:00.000Z'
        createdAt: '2025-07-01T11:00:00.000Z'
        updatedAt: '2025-07-02T15:00:00.000Z'
        completedAt: null
